# Docker Compose para executar todo o sistema hospitalar
# API Gateway + MS Autenticacao + MS Paciente + Bancos de Dados + Redis
# Execute com: docker-compose -f docker-compose-full-stack.yml up --build

services:
  # ============================================================================
  # FRONTEND
  # ============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hospital-frontend
    ports:
      - "4200:4200"
    environment:
      - NODE_ENV=production
      - API_URL=http://api-gateway:3000/api
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - hospital-net
    restart: on-failure:3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 90s

  # ============================================================================
  # API GATEWAY
  # ============================================================================
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: hospital-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MS_AUTENTICACAO_URL=http://ms-autenticacao:8081
      - MS_PACIENTE_URL=http://ms-paciente:8083
      - MS_CONSULTA_URL=http://ms-consulta:8080
      - JWT_SECRET=minhaChaveSecretaSuperSeguraParaJWT2025HospitalSystem
      - REDIS_URL=redis://redis-server:6379
      - CORS_ORIGIN=*
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      ms-autenticacao:
        condition: service_healthy
      ms-paciente:
        condition: service_healthy
      redis-server:
        condition: service_healthy
    networks:
      - hospital-net
    restart: on-failure:3
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 60s

  # ============================================================================
  # MS AUTENTICACAO
  # ============================================================================
  ms-autenticacao:
    build: 
      context: ./backend/ms-autenticacao
      dockerfile: Dockerfile
    container_name: ms-autenticacao-app
    ports:
      - "8081:8081" # MS Autenticacao na porta 8081
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://ms-autenticacao-db:5432/ms_autenticacao
      SPRING_DATASOURCE_USERNAME: dac
      SPRING_DATASOURCE_PASSWORD: 123
      SPRING_DATA_REDIS_HOST: redis-server
      SPRING_DATA_REDIS_PORT: 6379
      JWT_SECRET: minhaChaveSecretaSuperSeguraParaJWT2025HospitalSystem
      JWT_EXPIRATION: 86400000
      APP_DATA_LOAD_INITIAL: true
      # Email configuration
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: ${EMAIL_USERNAME:-}
      SPRING_MAIL_PASSWORD: ${EMAIL_PASSWORD:-}
    depends_on:
      ms-autenticacao-db:
        condition: service_healthy
      redis-server:
        condition: service_healthy
    networks:
      - hospital-net
    restart: on-failure:3
    healthcheck:
      test: ["CMD-SHELL", "timeout 10 bash -c '</dev/tcp/localhost/8081' || exit 1"]
      interval: 60s
      timeout: 20s
      retries: 5
      start_period: 120s

  # ============================================================================
  # MS PACIENTE  
  # ============================================================================
  ms-paciente:
    build:
      context: ./backend/ms-paciente
      dockerfile: Dockerfile
    container_name: ms-paciente-app
    ports:
      - "8083:8083" # MS Paciente na porta 8083
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ms-paciente-db:5432/hospital_paciente
      SPRING_DATASOURCE_USERNAME: dac
      SPRING_DATASOURCE_PASSWORD: 123
      JWT_SECRET: minhaChaveSecretaSuperSeguraParaJWT2025HospitalSystem
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_SECRET_KEY: minhaChaveSecretaSuperSeguraParaJWT2025HospitalSystem
      # MS Autenticacao URL for inter-service communication
      MS_AUTENTICACAO_URL: http://ms-autenticacao:8081
    depends_on:
      ms-paciente-db:
        condition: service_healthy
      ms-autenticacao: # MS Paciente depende do MS Autenticacao para funcionar
        condition: service_healthy
    networks:
      - hospital-net
    restart: on-failure:3
    healthcheck:
      test: ["CMD-SHELL", "timeout 10 bash -c '</dev/tcp/localhost/8083' || exit 1"]
      interval: 60s
      timeout: 20s
      retries: 5
      start_period: 120s

  # ============================================================================
  # BANCOS DE DADOS
  # ============================================================================
  
  # Banco do MS Autenticacao
  ms-autenticacao-db:
    image: postgres:16-alpine
    container_name: ms-autenticacao-db
    environment:
      POSTGRES_DB: ms_autenticacao
      POSTGRES_USER: dac
      POSTGRES_PASSWORD: 123
    ports:
      - "5432:5432" # Banco do MS Autenticacao
    volumes:
      - autenticacao_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dac -d ms_autenticacao"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - hospital-net
    restart: on-failure:5

  # Banco do MS Paciente
  ms-paciente-db:
    image: postgres:16-alpine
    container_name: ms-paciente-db
    environment:
      POSTGRES_DB: hospital_paciente
      POSTGRES_USER: dac
      POSTGRES_PASSWORD: 123
    ports:
      - "5434:5432" # Banco do MS Paciente (porta diferente para nÃ£o conflitar)
    volumes:
      - paciente_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dac -d hospital_paciente"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - hospital-net
    restart: on-failure:5

  # ============================================================================
  # REDIS (para blacklist de JWT e cache)
  # ============================================================================
  redis-server:
    image: redis:7-alpine
    container_name: redis-server
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - hospital-net
    restart: on-failure:5

# ============================================================================
# VOLUMES E REDES
# ============================================================================
volumes:
  autenticacao_db_data:
    driver: local
  paciente_db_data:
    driver: local
  redis_data:
    driver: local

networks:
  hospital-net:
    driver: bridge
    name: hospital-management-network
